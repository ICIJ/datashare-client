name: CI

on:
  push:
    branches:
      - ci/migrate-to-gh-actions
  pull_request:

jobs:

  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: dependencies-cache-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        run: make install

      - name: Save app bundle
        uses: actions/cache@v3
        with:
          path: .
          key: bundle-cache-${{ github.sha }}

  lint:
    runs-on: ubuntu-latest
    name: Lint
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Restore app bundle
        uses: actions/cache@v3
        with:
          path: .
          key: bundle-cache-${{ github.sha }}

      - name: Run linter
        run: yarn lint

  test:
    runs-on: ubuntu-latest
    name: Test
    needs: build
    services:
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.7
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms256m -Xmx256m
          http.cors.enabled: "true"
          http.cors.allow-origin: "*"
          http.cors.allow-methods: OPTIONS, HEAD, GET, POST, PUT, DELETE
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check Elasticsearch status
        run: curl -f http://localhost:9200

      - uses: actions/checkout@v3

      - name: Restore app bundle
        uses: actions/cache@v3
        with:
          path: .
          key: bundle-cache-${{ github.sha }}

      - name: Run unit tests
        env:
          NODE_OPTIONS: --max_old_space_size=4096
        run: yarn test:unit --silent --minWorkers 1 --maxWorkers 2

      - name: Make distribution
        run: make dist

  generate_doc:
    runs-on: ubuntu-latest
    name: Generate Doc
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Restore app bundle
        uses: actions/cache@v3
        with:
          path: .
          key: bundle-cache-${{ github.sha }}

      - name: Generate the doc
        run: make doc

      - name: Save doc
        uses: actions/cache@v3
        with:
          path: .
          key: doc-cache-${{ github.sha }}

  publish_doc:
    runs-on: ubuntu-latest
    name: Publish Doc
    needs: generate_doc
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Restore doc
        uses: actions/cache@v3
        with:
          path: .
          key: doc-cache-${{ github.sha }}

      - name: Install rsync
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "engineering@icij.org"

      - name: Clone datashare-docs
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git clone git@github.com:ICIJ/datashare-docs.git ~/datashare-docs

      - name: Copy generated docs
        run: rsync --del -r dist/docs/ ~/datashare-docs/developers/frontend

      - name: Commit and push
        run: |
          cd ~/datashare-docs
          git add -A
          git commit -m "doc: update client documentation [${{ github.sha }}]" || true
          git push origin main
